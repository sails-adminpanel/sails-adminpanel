// ESM initialize.mjs - –≥–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ adminpanel
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export default async function initialize(sails, hook) {
    console.log('üöÄ Starting adminpanel initialization...');
    
    try {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º Adminizer, Waterline –∏ sails-disk
        const [{ Adminizer, WaterlineAdapter }, Waterline, sailsDisk] = await Promise.all([
            import('adminizer'),
            import('waterline'),
            import('sails-disk')
        ]);
        
        console.log('‚úÖ All dependencies loaded successfully');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Waterline ORM –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        const orm = new (Waterline.default || Waterline)();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏
        console.log('ÔøΩ Registering system models...');
        await WaterlineAdapter.registerSystemModels(orm);
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Waterline —Å sails-disk –∞–¥–∞–ø—Ç–µ—Ä–æ–º
        const diskAdapterWithDefaults = {
            ...(sailsDisk.default || sailsDisk),
            defaults: {
                migrate: 'alter',
                schema: true,
                attributes: {
                    id: {type: 'number', autoMigrations: {autoIncrement: true}},
                    createdAt: {type: 'number', autoMigrations: {columnType: 'bigint'}},
                    updatedAt: {type: 'number', autoMigrations: {columnType: 'bigint'}}
                }
            }
        };

        const waterlineConfig = {
            adapters: {
                'disk': diskAdapterWithDefaults
            },
            datastores: {
                adminpanel: {  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è adminpanel
                    adapter: 'disk',
                    inMemoryOnly: true
                }
            }
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Waterline
        console.log('üîÑ Initializing Waterline ORM...');
        const ontology = await new Promise((resolve, reject) => {
            orm.initialize(waterlineConfig, (err, ontology) => {
                if (err) return reject(err);
                resolve(ontology);
            });
        });

        const waterlineAdapter = new WaterlineAdapter({orm, ontology});
        const ormAdapters = [waterlineAdapter];
        
        // –°–æ–∑–¥–∞–µ–º Adminizer —Å ORM –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏
        console.log('‚öôÔ∏è Creating Adminizer instance...');
        const adminizer = new Adminizer(ormAdapters);
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è adminizer
        const adminpanelConfig = {
            routePrefix: sails.config.adminpanel?.routePrefix || '/admin',
            auth: sails.config.adminpanel?.auth || false,
            policies: [],
            system: {
                defaultORM: 'waterline'  // –£–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω–æ!
            },
            models: {}
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º adminizer —Å –∫–æ–Ω—Ñ–∏–≥–æ–º
        console.log('üîÑ Initializing Adminizer...');
        console.log('üìã Config:', JSON.stringify(adminpanelConfig, null, 2));
        console.log('üîß ORM Adapters:', ormAdapters);
        await adminizer.init(adminpanelConfig);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º adminizer –≤ sails –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        sails.adminizer = adminizer;
        
        console.log('üéâ Adminpanel initialized successfully!');
        console.log(`üìç Admin panel available at: http://localhost:1337${adminpanelConfig.routePrefix}`);
        
    } catch (error) {
        console.error('‚ùå Failed to initialize adminpanel:', error);
        throw error;
    }
}
