let Puzzle = require("fix-esm").require("crypto-puzzle").default;
const { randomBytes } = require('crypto');
class FixedSizeMap {
  constructor(size) {
    this.size = size;
    this.map = [];
  }

  add(value) {
    console.log(value)
    this.map.push(value);
    if (this.map.length > this.size) {
      this.map.shift();
    }
  }

  get() {
    return this.map;
  } Xt
}

class CaptchaService {
  constructor() {
    this.captchaStorage = new FixedSizeMap(10); // Хранение последних 10 капч
  }



  async getPuzzle() {
    const randomMessage = "It makes sense + " + randomBytes(16).toString('hex');

    const puzzle = await Puzzle.generate({
      primeBits: 100,
      primeRounds: 6,
      opsPerSecond: 3_300_000,
      duration: 10_000,
      message: randomMessage
    });

    this.captchaStorage.add({
      question: puzzle,
      solution: randomMessage
    });

    return puzzle;
  }


  checkSolution(solution) {
=        const captchaSolutions = this.captchaStorage.get().map(captcha => captcha.solution);
    return captchaSolutions.includes(solution);
  }
}

exports.CaptchaService = CaptchaService;
